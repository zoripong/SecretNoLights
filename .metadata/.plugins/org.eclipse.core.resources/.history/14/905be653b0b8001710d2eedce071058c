package adapter;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.ImageIcon;

import gui.SNL;

public class MapReader {

	private int mStage;
	private int mMapInfo[][];
	private ImageIcon doorImageIcon;
	private int doorX;
	private int doorY;
	private boolean isStop;
	
	
	public MapReader(int stage) {
		mStage = stage;
		doorImageIcon = new ImageIcon(SNL.class.getResource("../images/door_close.png"));
		isStop = false;
		readFile();
	}

	public void setStage(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;

		g2d.drawImage(doorImageIcon.getImage(), doorX+5, doorY - doorImageIcon.getIconHeight() + 45, null);

		if(isStop) {
			try {
				Thread.sleep(3000);
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}

		int x = 0, y = 0;

		ImageIcon blockImageIcon = new ImageIcon(SNL.class.getResource("../images/block.png"));
		
		
		for (int i = 0; i < mMapInfo.length; i++) {
			for (int j = 0; j < mMapInfo[0].length; j++) {
				if (mMapInfo[i][j] == 1)
					// 블록 설치
					g2d.drawImage(blockImageIcon.getImage(), x, y, null);
				else if (mMapInfo[i][j] == 2) {
					doorX = x;
					doorY = y;
					g2d.drawImage(doorImageIcon.getImage(), x+5, y - doorImageIcon.getIconHeight() + 45, null);

				}
				x += blockImageIcon.getIconWidth();

			}
			x = 0;
			y += blockImageIcon.getIconHeight();
		}
		
	}

	private void readFile() {
		String fileName = "./src/map/stage_" + mStage + ".txt";

		String line = "";
		StringBuffer buff = new StringBuffer();

		try {
			BufferedReader br = new BufferedReader(new FileReader(new File(fileName)));

			while ((line = br.readLine()) != null) {
				buff.append(line);
			}
			// System.out.println(buff);
			br.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		char[] mapData = buff.toString().toCharArray();
		mMapInfo = new int[18][20];

		int cnt = 0;
		for (int i = 0; i < mMapInfo.length; i++) {
			for (int j = 0; j < mMapInfo[0].length; j++) {
				switch (mapData[cnt++]) {
				case 50:
					mMapInfo[i][j] = 2;
					break;
				case 49:
					mMapInfo[i][j] = 1;
					break;
				case 48:
					mMapInfo[i][j] = 0;
					break;
				}

			}
		}

	}

	public void nextStage() {
		mStage++;
		readFile();
		isStop = true;
	}

	public double getDoorMid() {
		return (double)(doorX+doorImageIcon.getIconWidth()/2);
	}
	
	public void setDoorImage(ImageIcon doorImageIcon) {
		this.doorImageIcon = doorImageIcon;
	}

}

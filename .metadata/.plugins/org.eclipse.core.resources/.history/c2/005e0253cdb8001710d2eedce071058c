package adapter;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;

import javax.swing.ImageIcon;

import customInterface.AutoMovingListener;
import gui.SNL;
import model.Location;
import model.Monster;
import thread.MonsterThread;

public class MapReader {

	private int mStage;
	private int mMapInfo[][];
	private ImageIcon doorImageIcon;
	private int doorX;
	private int doorY;
	private boolean isStop;
	
	ArrayList<Monster> monsters;

	private ArrayList<Location> monsterLocations;
	
	public MapReader(int stage) {
		mStage = stage;
		doorImageIcon = new ImageIcon(SNL.class.getResource("../images/door_close.png"));
		isStop = false;
		readFile();
		monsterLocations = new ArrayList<>();
	}

	public void setStage(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;

		int x = 0, y = 0;

		ImageIcon blockImageIcon = new ImageIcon(SNL.class.getResource("../images/block.png"));
		
		monsterLocations.clear();
		for (int i = 0; i < mMapInfo.length; i++) {
			for (int j = 0; j < mMapInfo[0].length; j++) {
				if (mMapInfo[i][j] == 1)
					// 블록 설치
					g2d.drawImage(blockImageIcon.getImage(), x, y, null);
				else if (mMapInfo[i][j] == 2) {
					doorX = x+5;
					doorY = y-doorImageIcon.getIconHeight()+45;
				}else if(mMapInfo[i][j] == 3) {
					// monster
					monsterLocations.add(new Location(x, y));
				}
				x += blockImageIcon.getIconWidth();

			}
			x = 0;
			y += blockImageIcon.getIconHeight();
		}
		
	}

	private void readFile() {
		
		String fileName = "./src/map/stage_" + mStage + ".txt";

		String line = "";
		StringBuffer buff = new StringBuffer();

		try {
			BufferedReader br = new BufferedReader(new FileReader(new File(fileName)));

			while ((line = br.readLine()) != null) {
				buff.append(line);
			}
			// System.out.println(buff);
			br.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		char[] mapData = buff.toString().toCharArray();
		mMapInfo = new int[18][20];

		int cnt = 0;
		for (int i = 0; i < mMapInfo.length; i++) {
			for (int j = 0; j < mMapInfo[0].length; j++) {
				switch (mapData[cnt++]) {
				case 51:
					mMapInfo[i][j] = 3;
					break;
				case 50:
					mMapInfo[i][j] = 2;
					break;
				case 49:
					mMapInfo[i][j] = 1;
					break;
				case 48:
					mMapInfo[i][j] = 0;
					break;
				}

			}
		}

	}

	public void nextStage() {
		mStage++;
		readFile();
		isStop = true;
	}

	public double getDoorMid() {
		return (double)(doorX+doorImageIcon.getIconWidth()/2);
	}

	public int getDoorX() {
		return doorX;
	}

	public int getDoorY() {
		return doorY;
	}
	
	public void drawDoor(Graphics g, int isOpen) {
		Graphics2D g2d = (Graphics2D) g;
		ImageIcon doorImage;
		if(isOpen == 1) {
			doorImage = new ImageIcon(SNL.class.getResource("../images/door_open.png"));
		}else {
			doorImage = new ImageIcon(SNL.class.getResource("../images/door_close.png"));
		}
		g2d.drawImage(doorImage.getImage(), doorX, doorY, null);

	}
	
	public ArrayList<Monster> initMonsters() {
		ImageIcon monster = new ImageIcon(SNL.class.getResource("../images/front_3.png"));
		monsters = new ArrayList<Monster>();

		monsters.add(new Monster(200, SNL.SCREEN_HEIGHT - 40, monster));

		return monsters;
	}
	
	public void removeMonsters() {
	}
}

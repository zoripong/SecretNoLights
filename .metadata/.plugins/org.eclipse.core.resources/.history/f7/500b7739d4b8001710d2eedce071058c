package gui;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.RenderingHints.Key;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

import org.omg.CosNaming.IstringHelper;

import adapter.MapReader;
import adapter.Music;
import customInterface.AutoMovingListener;
import customInterface.Direction;
import customInterface.JumpListener;
import model.Monster;
import model.Player;
import thread.JumpThread;
import thread.MonsterThread;

public class GamePanel extends JPanel implements ActionListener, KeyListener, Direction, JumpListener {
	private final int BLOCK_WIDTH = 43;

	private FrameManager fm;
	private int charType;

	private Image screenImage;
	private Image background;

	Timer t = new Timer(10, this); // 1초마다 actionPerformed 실행
	Player p;

	private Music gameMusic;
	private MapReader mMapReader;
	private boolean isMapDraw;
	private int isOpenDoor;
	
	ArrayList<Monster> monsters;
	ArrayList<MonsterThread> monsterThreads;

	public GamePanel(FrameManager fm, int charType) {
		this.fm = fm;
		this.charType = charType;

		init();

		setFocusable(true);
		this.requestFocus();
		addKeyListener(this);
		t.start();

	}

	public void init() {

		background = new ImageIcon(SNL.class.getResource("../images/game_background.png")).getImage();

		gameMusic = new Music("gameMusic.mp3", true);
		gameMusic.start();

		// Map read
		mMapReader = new MapReader(1);
		mMapReader.setStage();
		isMapDraw = true;

		// Monster
		monsterThreads = new ArrayList<MonsterThread>();
		setMonsters();
		
		// init player
		ImageIcon character = new ImageIcon(
				SNL.class.getResource("../images/front_" + String.valueOf(charType) + ".png"));
		p = new Player(50, SNL.SCREEN_HEIGHT - 80, character, charType, mMapReader);

		isOpenDoor = 0;
	}

	public void actionPerformed(ActionEvent ae) {
		repaint();
	}

	public void paint(Graphics g) {
		super.paint(g);
		if (isOpenDoor == 2) {

			for (int i = 0; i < monsters.size(); i++) {
				monsterThreads.get(i).onStop();
				monsterThreads.remove(i);
				monsters.remove(i);
			}
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			isOpenDoor = 0;
			mMapReader.nextStage();
		}

		for (int i = 0; i < monsters.size(); i++) {
			switch (p.isCrush(monsters.get(i))) {
			case -1:
				// 몬스터 사망
				// TODO : 시간 지속 시 사망으로,,
				// System.out.println("몬스터 사망");
				monsterThreads.get(i).onStop();
				monsterThreads.remove(i);
				monsters.remove(i);
				break;
			case 0:
				// 아무것도 아닌 상황
				break;
			case 1:
				// 몬스터에 맞아서 죽음
				if(p.get)
				gameMusic.close();
				fm.changePanel("HallPanel");
				return;
			}
		}
		// set the background
		screenImage = createImage(SNL.SCREEN_WIDTH, SNL.SCREEN_HEIGHT);
		Graphics screenGraphic = screenImage.getGraphics();
		screenDraw(screenGraphic);

		g.drawImage(screenImage, 0, 0, null);

		mMapReader.drawDoor(g, isOpenDoor);
		if (isOpenDoor == 1)
			isOpenDoor++;
		// draw the Map
		if (isMapDraw) {
			mMapReader.drawStage(g);
			// isMapDraw = false;
		}

		// draw the player
		p.draw(g);

		// draw the monsters
		for (int i = 0; i < monsters.size(); i++)
			monsters.get(i).draw(g);

	}

	public void screenDraw(Graphics g) {
		g.drawImage(background, 0, 0, null);
		paintComponents(g);
		this.repaint();

	}

	public void jump() {
		new JumpThread(this).start();
	}

	@Override
	public void jumpTimeArrived(int jumpIdx, int jumpy) {
		// TODO
		// 벽돌과 부딪혔을 때 처리하는 부분
		if (p.isRight())
			p.addX(5);
		else
			p.addX(-5);
		p.addY(jumpy);
		ImageIcon icon;
		if (p.isRight())
			icon = new ImageIcon(SNL.class.getResource("../images/jump_right_" + String.valueOf(charType) + ".png"));
		else
			icon = new ImageIcon(SNL.class.getResource("../images/jump_left_" + String.valueOf(charType) + ".png"));

		p.setImage(icon);
		if (p.getPosX() > (SNL.SCREEN_WIDTH - p.getWidth() - BLOCK_WIDTH))
			p.setPosX(SNL.SCREEN_WIDTH - p.getWidth() - BLOCK_WIDTH);

		if (p.getPosX() < BLOCK_WIDTH)
			p.setPosX(BLOCK_WIDTH);

		p.setJumpIdx(jumpIdx);

	}

	@Override
	public void jumpTimeEnded() {
		p.setImage(new ImageIcon(SNL.class.getResource("../images/front_" + String.valueOf(charType) + ".png")));
		p.setJumpIdx(0);
	}

	@Override
	public void keyTyped(KeyEvent e) {

	}

	@Override
	public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {
			System.out.println("AttackBefore" + p.getPosX());
			p.attackEnd();
			System.out.println("AttackAfter" + p.getPosX());
		}
		p.setImage(new ImageIcon(SNL.class.getResource("../images/front_" + String.valueOf(charType) + ".png")));
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// System.out.println(e.getKeyCode());
		switch (e.getKeyCode()) {
		case KeyEvent.VK_LEFT:
			p.move(LEFT);
			// System.out.println("left");
			break;
		case KeyEvent.VK_RIGHT:
			p.move(RIGHT);
			// System.out.println("right");
			break;
		case KeyEvent.VK_UP:
			if (p.isJumping())
				return;
			jump();
			break;
		case KeyEvent.VK_DOWN:
			p.move(DOWN);
			System.out.println(p.getA()[0] + "/" + mMapReader.getDoorMid() + "/" + p.getD()[0]);
			if (!p.isJumping()) {
				if (p.getA()[0] <= mMapReader.getDoorMid() && mMapReader.getDoorMid() <= p.getD()[0]) {
					System.out.println("열려라 참깨");
					isOpenDoor = 1;
				}
			}

			break;
		case KeyEvent.VK_SPACE:
			if (p.isAttack())
				return;
			p.attack();
			break;
		}
		repaint();

	}
	
	private void setMonsters() {
		monsters = mMapReader.initMonsters();
		monsterThreads.clear();

		for (int i = 0; i < monsters.size(); i++) {
			monsterThreads.add(new MonsterThread(monsters.get(i), new AutoMovingListener() {
				@Override
				public void repaintable() {
					repaint();
				}
			}));
			monsterThreads.get(i).start();
		}

	}
	
	private void removeMonsters() {
		
	}

}
